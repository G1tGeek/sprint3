node {
    def ATTENDANCE_REPO = 'https://github.com/OT-MICROSERVICES/attendance-api.git'
    def NOTIFICATION_REPO = 'https://github.com/OT-MICROSERVICES/notification-worker.git'
    def SLACK_CHANNEL = 'notificationn-channel'
    def SLACK_CREDENTIAL_ID = 'downtime-crew'
    def EMAIL_TO = 'yuvraj.singh.snaatak@mygurukulam.co'

    try {
        stage('Install Packages') {
            echo 'Checking and installing required packages if missing...'
            sh '''
                set -e

                check_package() {
                    dpkg -s "$1" >/dev/null 2>&1
                }

                MISSING=0

                for pkg in python3 python3-pip python3-venv; do
                    if check_package "$pkg"; then
                        echo "$pkg is already installed."
                    else
                        echo "$pkg is NOT installed."
                        MISSING=1
                    fi
                done

                if [ "$MISSING" -eq 1 ]; then
                    echo "Installing missing packages..."
                    sudo apt-get update
                    sudo apt-get install -y python3 python3-pip python3-venv
                else
                    echo "All required packages are already installed."
                fi
            '''
        }

        stage('Clone Repositories') {
            echo 'Cloning Attendance API and Notification Worker repos...'
            sh '''
                sudo rm -rf notification-worker attendance-api
                git clone https://github.com/OT-MICROSERVICES/attendance-api.git
                git clone https://github.com/OT-MICROSERVICES/notification-worker.git
            '''
        }

        stage('Audit Attendance API Dependencies') {
            dir('attendance-api') {
                echo 'Creating virtual environment and auditing Attendance API...'
                sh '''
                    python3 -m venv venv1
                    . venv1/bin/activate
                    pip install pip-audit
                    pip freeze > requirements.txt
                    pip-audit -r requirements.txt > pip_audit_attendance.txt || true
                    deactivate
                '''
                def result = sh(script: 'grep -q "Vulnerability:" pip_audit_attendance.txt', returnStatus: true)
                if (result == 0) {
                    currentBuild.result = 'UNSTABLE'
                    echo 'Vulnerabilities found in Attendance API.'
                }
                archiveArtifacts artifacts: 'pip_audit_attendance.txt', allowEmptyArchive: true
            }
        }

        stage('Audit Notification Worker Dependencies') {
            dir('notification-worker') {
                echo 'Creating virtual environment and auditing Notification Worker...'
                sh '''
                    python3 -m venv venv2
                    . venv2/bin/activate
                    pip install pip-audit
                    pip freeze > requirements.txt
                    pip-audit -r requirements.txt > pip_audit_notification.txt || true
                    deactivate
                '''
                def result = sh(script: 'grep -q "Vulnerability:" pip_audit_notification.txt', returnStatus: true)
                if (result == 0) {
                    currentBuild.result = 'UNSTABLE'
                    echo 'Vulnerabilities found in Notification Worker.'
                }
                archiveArtifacts artifacts: 'pip_audit_notification.txt', allowEmptyArchive: true
            }
        }

        if (currentBuild.result == 'UNSTABLE') {
            echo 'Some vulnerabilities were found. Please review the audit reports.'
            slackSend(
                channel: SLACK_CHANNEL,
                color: '#FFA500',
                message: """\
⚠️ Vulnerabilities found during dependency audit in *${env.JOB_NAME}* (Build #${env.BUILD_NUMBER}).
Review the reports here: ${env.BUILD_URL}
""",
                tokenCredentialId: SLACK_CREDENTIAL_ID
            )
        } else {
            echo 'All dependency checks passed without vulnerabilities.'
            slackSend(
                channel: SLACK_CHANNEL,
                color: 'good',
                message: """\
✅ *Build #${env.BUILD_NUMBER} succeeded*
• Job: ${env.JOB_NAME}
• URL: ${env.BUILD_URL}
""",
                tokenCredentialId: SLACK_CREDENTIAL_ID
            )
        }

    } catch (Exception err) {
        currentBuild.result = 'FAILURE'
        echo 'Build failed.'
        slackSend(
            channel: SLACK_CHANNEL,
            color: 'danger',
            message: """\
❌ *Build #${env.BUILD_NUMBER} failed*
• Job: ${env.JOB_NAME}
• URL: ${env.BUILD_URL}
""",
            tokenCredentialId: SLACK_CREDENTIAL_ID
        )
        throw err
    } finally {
        echo 'Sending email with audit reports...'
        def emailBody = """\
Hello Yuvraj,

Please find attached the pip-audit reports from your Jenkins build.

• Job: ${env.JOB_NAME}
• Build Number: ${env.BUILD_NUMBER}
• URL: ${env.BUILD_URL}

Regards,
Jenkins
"""
        emailext(
            to: EMAIL_TO,
            subject: "Jenkins Build #${env.BUILD_NUMBER} - Audit Reports",
            body: emailBody,
            attachmentsPattern: '**/pip_audit_*.txt',
            mimeType: 'text/plain'
        )
    }
